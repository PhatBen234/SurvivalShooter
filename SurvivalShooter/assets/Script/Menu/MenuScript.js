cc.Class({
  extends: cc.Component,

  properties: {
    menuBtnLayout: cc.Node,
    stageChose: cc.Node,
    homeBtn: cc.Node,
    settingLayout: cc.Node,

    music: {
      default: null,
      type: cc.AudioClip,
    },
    volumeSlider: {
      default: null,
      type: cc.Slider,
    },

    //Pause Menu
    pauseMenu: cc.Node,

    //Result Menu
    resultMenu: cc.Node,
    resultLabel: cc.Label, // Label hi·ªÉn th·ªã k·∫øt qu·∫£ (WIN/FAIL)
    nextStageBtn: cc.Node, // N√∫t Next Stage
  },

  onLoad() {
    this.menuBtnLayout.active = true;
    this.stageChose.active = false;
    this.homeBtn.active = false;
    this.settingLayout.active = false;

    //Pause Menu
    this.pauseMenu.active = false;

    //Result Menu
    this.resultMenu.active = false;

    // Ph√°t nh·∫°c l·∫∑p l·∫°i v√† l∆∞u l·∫°i ID ƒë·ªÉ ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng
    this.audioID = cc.audioEngine.play(this.music, true, 1);

    // ƒê·∫∑t max c·ªßa thanh slider l√† 1 (max volume = 1)
    if (this.volumeSlider) {
      this.volumeSlider.progress = 1;
      this.volumeSlider.node.on("slide", this.onVolumeChanged, this);
    }
  },

  onPlayClick() {
    this.menuBtnLayout.active = false;
    this.stageChose.active = true;
    this.homeBtn.active = true;
  },

  onStage1Click() {
    cc.director.loadScene("Stage1");
  },
  onStage2Click() {
    cc.director.loadScene("Stage2");
  },
  onStage3Click() {
    cc.director.loadScene("BossStage");
  },
  onSettingsClick() {
    this.settingLayout.active = true;
  },

  onGoBackClick() {
    this.settingLayout.active = false;
  },

  onHomeClick() {
    cc.director.loadScene("MainMenu");
  },

  onExitClick() {
    if (cc.sys.isNative) {
      cc.game.end();
    } else {
      cc.log("Tr√¨nh duy·ªát kh√¥ng th·ªÉ tho√°t qua code.");
    }
  },

  onVolumeChanged() {
    const volume = this.volumeSlider.progress;
    cc.audioEngine.setVolume(this.audioID, volume);
  },

  //Pause Menu
  onPauseClick() {
    this.pauseMenu.active = true;
    cc.director.pause();
  },

  onResumeClick() {
    this.pauseMenu.active = false;
    cc.director.resume();
  },

  onRestartClick() {
    this.pauseMenu.active = false;
    this.resultMenu.active = false;
    const currentScene = cc.director.getScene().name;
    if (currentScene === "Stage1") {
      cc.director.resume();
      cc.director.loadScene("Stage1");
    }
    else if (currentScene === "Stage2") {
      cc.director.resume();
      cc.director.loadScene("Stage2");
    }
    else {
      cc.director.resume();
      cc.director.loadScene("BossStage");
    }
  },
  
  //Result Menu
  showResultPanel(isWin) {
    // Hi·ªÉn th·ªã result menu
    this.resultMenu.active = true;
    
    // T·∫°m d·ª´ng game
    cc.director.pause();
    
    // C·∫≠p nh·∫≠t label k·∫øt qu·∫£
    if (this.resultLabel) {
      if (isWin) {
        this.resultLabel.string = "üéâ VICTORY! üéâ";
        this.resultLabel.node.color = cc.Color.GREEN;
      } else {
        this.resultLabel.string = "üíÄ GAME OVER üíÄ";
        this.resultLabel.node.color = cc.Color.RED;
      }
    }
    
    // Hi·ªÉn th·ªã/·∫©n n√∫t Next Stage d·ª±a tr√™n k·∫øt qu·∫£
    if (this.nextStageBtn) {
      this.nextStageBtn.active = isWin; // Ch·ªâ hi·ªán khi th·∫Øng
    }
  },

  onClickNextStage() {
    const currentScene = cc.director.getScene().name;
    
    // Resume game tr∆∞·ªõc khi chuy·ªÉn scene
    cc.director.resume();

    if (currentScene === "Stage1") {
      cc.director.loadScene("Stage2");
    }
    else if (currentScene === "Stage2") {
      cc.director.loadScene("BossStage");
    }
    else if (currentScene === "BossStage") {
      // N·∫øu ƒë√£ ho√†n th√†nh boss stage, v·ªÅ main menu
      cc.director.loadScene("MainMenu");
    }
  },

  // H√†m ƒë·ªÉ ƒë√≥ng result panel v√† v·ªÅ main menu (khi thua)
  onResultHomeClick() {
    cc.director.resume();
    cc.director.loadScene("MainMenu");
  },
});